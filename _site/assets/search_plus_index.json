{"/pages/bash/": {
    "title": "Bash",
    "keywords": "Jekyll",
    "url": "/pages/bash/",
    "body": "Linux commands Cheat Sheet Move in console File commands File Permissions Process Management SSH Searching System info Network Compression Additional References Move in console # Show the manual for command man command # Show the history of the commands executed history # Uses the bang (!) to refer to the id of the command in history !&lt;history_number&gt; # Repeat the last command executed !! # Delete all output and restart console reset # End of command line ctrl+e # Begin of command line ctrl+a # Delete word of command line ctrl+w # Delete full line of command line ctrl+u # Search in the command history ctrl + r # Clear console ctrl + l # Show the output of a command in a table format command | column -t # Full screen F11 # Increase and descrease font ctrl+shift+\\+ ctrl+shift+\\- # Stack of directories to save navigation pushd /path/file popd /path/file File commands # Formatted listing with hidden files ls -la # Change directory to dir cd # Change directory to home cd cd ~ # Back to previous directory cd - # Create a directory dir mkdir dir # Force remove directory dir rm -rf dir # Copy dir1 to dir2 cp -r dir1 dir2 # Rename/move file1 to file2 mv file1 file2 # Create symbolic link to file ln -s file link # Create or update file touch file # Place standard input into file cat &gt; file # Output the cotents of file more file # Output the first lines of file head file # Output the last lines of file tail file # Output the contents of file as it grows, starting with the last 10 lines tail -f file # Set the size of the file to 0, so it delets all of its content truncate -s 0 file # Count words/lines in a file wc File Permissions # Change the mode of access `chmod OPTIONS {u,g,o}{+,-,=}{r,w,x}` # User (u), Group (g), Others (o) # Read (r,4), Write (w, 2), Execute (x, 1) chmod 777 file chmod u=rwx filename chmod -r +x file # change the file owner and/or group chown owner:group file chown -r owner:group file Process Management # Display your currently active processes ps # Display all running processes top htop # Kill process id PID kill &lt;PID&gt; # Kill al processes named proc killall proc # \"Minimaze\" send to the background ctrl + z # List stopped or background jobs; resume a stopped job in the background bg # Brings the most revent job to foreground fg # Brings job n to the foregroun fg n # Run a command immune to hangups, even when the parent terminal is closed nohup command # Process starts in the background command &amp; # Process starts in the background and the process will not be killed when closing the terminal nohup command &amp; SSH # Connect to host as user ssh user@host # Connect to host on port as user ssh -p port user@host # Add your key to host for user to enable a keyed or passwordless login ssh-copy-id user@host # Copies files between hosts on a network scp adm-dumitrux@10.0.0.10:/home/adm-dumitrux/ dumitrux@10.0.0.20:/home/dumitrux # Copies files between hosts on a network; selects the private key for authentication scp adm-dumitrux@10.0.0.10:/home/adm-dumitrux/ dumitrux@10.0.0.20:/home/dumitrux -i ~/.ssh/mytest.key Searching # Search for pattern in files grep pattern files # Search recursively for pattern in dir grep -r pattern dir # Search for pattern in the output of command command | grep pattern # Find all instances of file locate file System info # Show the current date and time date # Show this month's calendar cal # Show current uptime uptimw # Display who is online w # Who you are loggin in as whoami # Display information about user finger user # Show kernel information uname -o # CPU information cat /proc/cpuinfo # Memory information cat /proc/meminfo # Show disk usage df # Show directory space usage du # Estimate file space usage; sc: display only a total; h: human readable format du -sch | sort -h # Show memory and swap usage free # Show possible locations of app whereis app # Show which app will be run by default which app Network # Ping host and output results ping host # Get whois info for domain whois domain # Download file wget file # DNS lookup utility dig google.com dig google.com @dns_ip # Print the route packets trace to network host traceroute -4 google.com # Query Internet name servers interactively nslookup google.com Compression # Create a file.tar containing files tar cf file.tar files # Extract the files from file.tar tar xf file.tar # Create a tar using gzip tar czf file.tar.gz files # Extract a tar using gzip with verbose output tar xzfv file.tar.gz Additional # Edit the user session bash to add the date on the history commands output vim ~/.bashrc &gt; HISTTIMEFORMAT=\"%T-%m-%d %T \" # Not useful, just looks cool cmatrix References https://www.linuxjournal.com/content/pattern-matching-bash"
  },"/pages/github-actions/": {
    "title": "GitHub Actions",
    "keywords": "Jekyll",
    "url": "/pages/github-actions/",
    "body": "Learn GitHub Actions Learn GitHub Actions Registration Introduction General Most relevant sections Learn GitHub Actions Using Workflows Build and test Deployment - Target different environments Monitor \\&amp; troubleshoot GitHub and Self-hosted runners Creating actions GitHub Actions API Dependencies Common CI/CD Actions Samples Registration GitHub Partner Certifications GitHub Partner Certifications - Candidate Handbook GitHub Partner Certifications - FAQ Introduction Quickstart for GitHub Actions General MSFT Learn GitHub Actions Collection MSFT Learn Path: Automate your workflow with GitHub Actions GitHub Actions documentation Most relevant sections Learn GitHub Actions Understanding GitHub Actions Essential features of GitHub Actions Contexts Variables Usage limits, billing, and administration Using Workflows Disabling and enabling a workflow Events that trigger workflows Workflow syntax for GitHub Actions Caching dependencies to speed up workflows Storing workflow data as artifacts Sharing workflows, secrets, and runners with your organization Build and test About continuous integration Deployment - Target different environments Using environments for deployment Monitor &amp; troubleshoot Adding a workflow status badge Using workflow run logs Enabling debug logging GitHub and Self-hosted runners About GitHub-hosted runners About self-hosted runners Creating actions Metadata syntax for GitHub Actions GitHub Actions API GitHub REST API GitHub REST API - Actions artifacts GitHub REST API - Workflow runs Dependencies Webhook events and payloads MSFT Learn - Intro to Docker containers GitHub API - Octokit Common CI/CD Actions GitHub Marketplace GitHub Actions starter-workflow actions/upload-artifact actions/download-artifact actions/github-script azure/webapps-deploy@v2 azure/login@v1 azure/docker-login@v1 pullreminders/label-when-approved-action Samples midudev/pokedex-for-ci"
  },"/pages/jekyll/": {
    "title": "Jekyll",
    "keywords": "Jekyll",
    "url": "/pages/jekyll/",
    "body": "Install sudo apt install ruby -y ruby -v gem -v sudo apt install gcc -y gcc -v sudo apt install g++ -y g++ -v sudo apt install make -y make -v sudo apt install ruby-bundler -y bundle -v sudo apt install jekyll -y jekyll new --skip-bundle . mkdir jekyll cd jekyll bundle install bundle exec jekyll serve ls -l /usr/lib/ruby/ rm -rf /usr/lib/ruby/vendor_ruby/ bundle install bundle exec jekyll serve bundle update sass bundle exec jekyll serve Theme jekyll-gitbook Jekyll Themes Configuration https://jekyllrb.com https://bookdown.org/yihui/bookdown/html.html Disqus https://disqus.com/ buymeacoffee https://www.buymeacoffee.com"
  },"/pages/powershell/": {
    "title": "PowerShell",
    "keywords": "Jekyll",
    "url": "/pages/powershell/",
    "body": "PowerShell Basic commands Iterate through files in a directory Scripts Iterate through files in a directory Get-ChildItem \".\" -Filter *.log | Foreach-Object { $content = Get-Content $_.FullName #filter and save content to the original file $content | Where-Object {$_ -match 'step[49]'} | Set-Content $_.FullName #filter and save content to a new file $content | Where-Object {$_ -match 'step[49]'} | Set-Content ($_.BaseName + '_out.log') }"
  },"/pages/terraform/": {
    "title": "Terraform",
    "keywords": "Jekyll",
    "url": "/pages/terraform/",
    "body": "Terrform info Locals Modules Count vs For_each Import vs Data Source Features Block Dynamic Blocks Override Terrform practice Install Terraform Conenct to Azure Azure Storage account Terraform commands Terraform code Access the VM Custom data Install remote SSH VSC extension to access the remote VM Data sources Outputs Variables Conditionals Terrform info References: https://youtube.com/playlist?list=PLnWpsLZNgHzVVslxs8Bwq19Ng0ff4XlFv Use the resources instead of variables to set a dependency on the creation of the resource. Terraforms treats all the divided .tf files as the same file. Locals To assign a name to an expression. Update the local to modify all instance of the expression. Helps with repeating values. Overuse can make code difficult to read. Modules Reusable code. Collection of resources. Accepts inputs, produces outputs. Modules are not a single instance of a resource. Modules is a collection of resources. Example: https://github.com/tsrob50/TerraformExamples/tree/main/ModuleExample Count vs For_each Count Use count if the instances of the resources are almost identical. Using the index to identify the different instances. For_each Multiple versions of similar versions. Uses areguments where the value is mapped to a set of strings. Map is a key value pair. Example: https://github.com/tsrob50/TerraformExamples/tree/main/VNetandBastionHost Import vs Data Source Import Imports infraestructure into Terraform management. Added to Terraform state and managed by Terraform going forward. Data Source Allows Terraform to define and use existing infraestructure. Not managed by Terraform. Data refreshed during Terraform Plan. Features Block Docs: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/features-block Dynamic Blocks Use for reosurce that have repetable nested blocks in their arguments. For example, servers can hhave multiple disks or NICs. A for_each loop is used to create multiple similar instances of an object such as a resource. A Dynamic Block uses a for_each loop to create multiple copies of a sub-resource nested inside a resource. Example: https://github.com/tsrob50/TerraformExamples/tree/main/DynamicNSG Override Avoid using. Useful for automation, it changes settings without modifying source files. Override file allows to override values in a Terraform deployment. It consists of a set of configurations that replace the values in existing .tf files. After all the .tf files are processed by Terraform, the override files are merged into the configuration. The merge replaces the values supplied by the configuration files. The name convention is important. The files are processed or merged in lexicographical order (alphabetic order). Override File Names: override.tf, override.tf.json test_override.tf, test_override.tf.json Terrform practice References: https://youtu.be/V53AHWun17s Install Terraform Donwload terraform.exe Move to “C:\\Program Files\\Terraform” Edit PATH environment variable terraform --version Conenct to Azure Azure CLI az login --use-device-code az account show az account set --subscription &lt;subscription_id&gt; az group list --query \"[?name=='mtc-resources']\" az network vnet subnet list -g rg-mock --vnet-name vnet-mock --query \"[?name=='subnet-mock']\" az vm image list --all --publisher=\"Canonical\" &gt; images.json az vm image list --all --publisher=\"Canonical\" --sku=\"22_04-lts-gen2\" Azure Storage account The Storage account name has to be unique. Do not create the Storage Account with Terraform. Consider that the Terraform state file in the Storage Account is not a stateless resource. Meaning it cannot be destroyed and recreat it as needed. There is state date in the Storage Account needed for deployments. The ACCOUNT_KEY is not needed if the deployment is don trough a Pipeline. $SUBCRIPTION_NAME='' $RESOURCE_GROUP_NAME='rg-tfstate' $STORAGE_ACCOUNT_NAME=\"tfstate01$(get-random)\" $CONTAINER_NAME='tfstate' # Set subscription to be the current active subscription. az account show az account set --subscription &lt;subscription_id&gt; # Create resource group az group create --name $RESOURCE_GROUP_NAME --location eastus # Create storage account az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob # Create blob container az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME #Get the storage access key and store it as an environment variable $ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv) $env:ARM_ACCESS_KEY=$ACCOUNT_KEY Docs: https://developer.hashicorp.com/terraform/language/settings/backends/azurerm Terraform commands terraform init terraform frmt terraform plan terraform apply -help terraform apply terraform apply -auto-approve terraform apply -replace azurerm_linux_virtual_machine.mtc-vm terraform apply -refresh-only terraform state list terraform state show azurerm_resource_group.mtc-rg terraform state show azurerm_public_ip.mtc-nic terraform output terraform output public_ip_address terraform refresh terraform plan -destroy terraform apply -destroy terraform destroy Terraform code State file and its backup, do not modify unless is strictly necessary. More info: https://developer.hashicorp.com/terraform/language/state In mtc-test-rule.source_address_prefix, should be your public IP to connect to the Azure resources from local. Access the VM Create SSH key to access the VM: ssh-keygen -t rsa &gt; C:\\Users\\dumitrux/.ssh/privatekey ls ~/.ssh SSH into the VM terraform state show azurerm_public_ip.mtc-vm ssh -i ~/.ssh/privatekey adminuser@&lt;vm_ip&gt; lsb_release -a Custom data This will delete and create the VM ssh -i ~/.ssh/privatekey adminuser@&lt;vm_ip&gt; docker --version Install remote SSH VSC extension to access the remote VM Install VSC extension “Remote - SSH” Open Command Palette (Ctrl+Shift+P) Type “Remote-ssh: Add New SSH Host…” Type “ssh adminuser@\" Chose “~/.ssh/config” directory Open config file Create “windows-ssh-script.tpl” and “linux-ssh-script.tpl” Add the “provisioner” attribute in the “azurerm_linux_virtual_machine” Redeploy all terraform apply -replace azurerm_linux_virtual_machine.mtc-vm Type “Remote-ssh: Connect to Host…” on the Command Palette Select the identifier of the remote machine Select Linux Click “Continue” on the provided fingerprint Wait for docker to be installed and check with docker -version Data sources Add data \"azurerm_public_ip\" \"mtc-ip-data\" in the code Run terraform apply -refresh-only The data will be at the top of the state file Check the data with terraform state list Check the value of the data with terraform state show data.azurerm_public_ip.mtc-ip-data Outputs Add output \"public_ip_adrress\" in the code Check value with terraform state show data.azurerm_public_ip.mtc-ip-data Run terraform apply -refresh-only Run terraform output or terraform output public_ip_address Variables Add ${var.host_os} in the templatefile of the VM provisioner Create variables.tf with the host_osvariable and plan the deployment Add the attribute default to the variables.tf file Run terraform console and type var.host_os Comment the default attribute Create terraform.tfvars Run terraform console and type var.host_os Run terraform console -var=\"host_os=linux\" and type var.host_os Create osx.tfvars Run terraform console -var-file=\"osx.tfvars\" and type var.host_os Conditionals Syntax condition ? true_val : false_val Add the conditional in the VM provisioner Run terraform apply -auto-approve"
  },"/jekyll/update/2023-09-11-welcome-to-jekyll.html": {
    "title": "Welcome to Jekyll!",
    "keywords": "jekyll update",
    "url": "/jekyll/update/2023-09-11-welcome-to-jekyll.html",
    "body": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk."
  },"/jekyll/update/2023-09-11-terraform.html": {
    "title": "Terraform",
    "keywords": "jekyll update",
    "url": "/jekyll/update/2023-09-11-terraform.html",
    "body": "Terrform info Locals Modules Count vs For_each Import vs Data Source Features Block Dynamic Blocks Override Terrform practice Install Terraform Conenct to Azure Azure Storage account Terraform commands Terraform code Access the VM Custom data Install remote SSH VSC extension to access the remote VM Data sources Outputs Variables Conditionals Terrform info References: https://youtube.com/playlist?list=PLnWpsLZNgHzVVslxs8Bwq19Ng0ff4XlFv Use the resources instead of variables to set a dependency on the creation of the resource. Terraforms treats all the divided .tf files as the same file. Locals To assign a name to an expression. Update the local to modify all instance of the expression. Helps with repeating values. Overuse can make code difficult to read. Modules Reusable code. Collection of resources. Accepts inputs, produces outputs. Modules are not a single instance of a resource. Modules is a collection of resources. Example: https://github.com/tsrob50/TerraformExamples/tree/main/ModuleExample Count vs For_each Count Use count if the instances of the resources are almost identical. Using the index to identify the different instances. For_each Multiple versions of similar versions. Uses areguments where the value is mapped to a set of strings. Map is a key value pair. Example: https://github.com/tsrob50/TerraformExamples/tree/main/VNetandBastionHost Import vs Data Source Import Imports infraestructure into Terraform management. Added to Terraform state and managed by Terraform going forward. Data Source Allows Terraform to define and use existing infraestructure. Not managed by Terraform. Data refreshed during Terraform Plan. Features Block Docs: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/features-block Dynamic Blocks Use for reosurce that have repetable nested blocks in their arguments. For example, servers can hhave multiple disks or NICs. A for_each loop is used to create multiple similar instances of an object such as a resource. A Dynamic Block uses a for_each loop to create multiple copies of a sub-resource nested inside a resource. Example: https://github.com/tsrob50/TerraformExamples/tree/main/DynamicNSG Override Avoid using. Useful for automation, it changes settings without modifying source files. Override file allows to override values in a Terraform deployment. It consists of a set of configurations that replace the values in existing .tf files. After all the .tf files are processed by Terraform, the override files are merged into the configuration. The merge replaces the values supplied by the configuration files. The name convention is important. The files are processed or merged in lexicographical order (alphabetic order). Override File Names: override.tf, override.tf.json test_override.tf, test_override.tf.json Terrform practice References: https://youtu.be/V53AHWun17s Install Terraform Donwload terraform.exe Move to “C:\\Program Files\\Terraform” Edit PATH environment variable terraform --version Conenct to Azure Azure CLI az login --use-device-code az account show az account set --subscription &lt;subscription_id&gt; az group list --query \"[?name=='mtc-resources']\" az network vnet subnet list -g rg-mock --vnet-name vnet-mock --query \"[?name=='subnet-mock']\" az vm image list --all --publisher=\"Canonical\" &gt; images.json az vm image list --all --publisher=\"Canonical\" --sku=\"22_04-lts-gen2\" Azure Storage account The Storage account name has to be unique. Do not create the Storage Account with Terraform. Consider that the Terraform state file in the Storage Account is not a stateless resource. Meaning it cannot be destroyed and recreat it as needed. There is state date in the Storage Account needed for deployments. The ACCOUNT_KEY is not needed if the deployment is don trough a Pipeline. $SUBCRIPTION_NAME=\"\" $RESOURCE_GROUP_NAME=\"rg-tfstate\" $STORAGE_ACCOUNT_NAME=\"tfstate01$(get-random)\" $CONTAINER_NAME=\"tfstate\" # Set subscription to be the current active subscription. az account show az account set --subscription &lt;subscription_id&gt; # Create resource group az group create --name $RESOURCE_GROUP_NAME --location eastus # Create storage account az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob # Create blob container az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME #Get the storage access key and store it as an environment variable $ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query '[0].value' -o tsv) $env:ARM_ACCESS_KEY=$ACCOUNT_KEY Docs: https://developer.hashicorp.com/terraform/language/settings/backends/azurerm Terraform commands terraform init terraform frmt terraform plan terraform apply -help terraform apply terraform apply -auto-approve terraform apply -replace azurerm_linux_virtual_machine.mtc-vm terraform apply -refresh-only terraform state list terraform state show azurerm_resource_group.mtc-rg terraform state show azurerm_public_ip.mtc-nic terraform output terraform output public_ip_address terraform refresh terraform plan -destroy terraform apply -destroy terraform destroy Terraform code State file and its backup, do not modify unless is strictly necessary. More info: https://developer.hashicorp.com/terraform/language/state In mtc-test-rule.source_address_prefix, should be your public IP to connect to the Azure resources from local. Access the VM Create SSH key to access the VM: ssh-keygen -t rsa &gt; C:\\Users\\dumitrux/.ssh/privatekey ls ~/.ssh SSH into the VM terraform state show azurerm_public_ip.mtc-vm ssh -i ~/.ssh/privatekey adminuser@&lt;vm_ip&gt; lsb_release -a Custom data This will delete and create the VM ssh -i ~/.ssh/privatekey adminuser@&lt;vm_ip&gt; docker --version Install remote SSH VSC extension to access the remote VM Install VSC extension “Remote - SSH” Open Command Palette (Ctrl+Shift+P) Type “Remote-ssh: Add New SSH Host…” Type “ssh adminuser@\" Chose “~/.ssh/config” directory Open config file Create “windows-ssh-script.tpl” and “linux-ssh-script.tpl” Add the “provisioner” attribute in the “azurerm_linux_virtual_machine” Redeploy all terraform apply -replace azurerm_linux_virtual_machine.mtc-vm Type “Remote-ssh: Connect to Host…” on the Command Palette Select the identifier of the remote machine Select Linux Click “Continue” on the provided fingerprint Wait for docker to be installed and check with docker -version Data sources Add data \"azurerm_public_ip\" \"mtc-ip-data\" in the code Run terraform apply -refresh-only The data will be at the top of the state file Check the data with terraform state list Check the value of the data with terraform state show data.azurerm_public_ip.mtc-ip-data Outputs Add output \"public_ip_adrress\" in the code Check value with terraform state show data.azurerm_public_ip.mtc-ip-data Run terraform apply -refresh-only Run terraform output or terraform output public_ip_address Variables Add ${var.host_os} in the templatefile of the VM provisioner Create variables.tf with the host_osvariable and plan the deployment Add the attribute default to the variables.tf file Run terraform console and type var.host_os Comment the default attribute Create terraform.tfvars Run terraform console and type var.host_os Run terraform console -var=\"host_os=linux\" and type var.host_os Create osx.tfvars Run terraform console -var-file=\"osx.tfvars\" and type var.host_os Conditionals Syntax condition ? true_val : false_val Add the conditional in the VM provisioner Run terraform apply -auto-approve"
  }}
